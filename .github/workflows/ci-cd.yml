name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  K3S_CONTEXT: default

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check code format
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      
      - name: Lint with clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings
      
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release
      
      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --release
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mussubotti
          path: target/release/mussubotti

  build-and-push-image:
    needs: build-and-test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=short
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
      
      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
      - name: Extract short SHA
        id: sha
        run: echo "short=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT
      
      - name: Apply Docker Slim for amd64
        uses: kitabisa/docker-slim-action@v1
        id: slim
        env:
          DSLIM_HTTP_PROBE: false
        with:
          target: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ steps.sha.outputs.short }}
          tag: "sha-${{ steps.sha.outputs.short }}-slim,latest-slim"

  deploy:
    needs: build-and-push-image
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Tailscale
        uses: tailscale/github-action@main
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_HOST }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Update k8s deployment image
        run: |
          TAG=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          
          # Create namespace if it doesn't exist
          kubectl get namespace mussubot || kubectl create namespace mussubot
          
          # Create k8s secrets if they don't exist
          kubectl get secret mussubotti-secrets -n mussubot || kubectl create secret generic mussubotti-secrets \
            -n mussubot \
            --from-literal=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
            --from-literal=GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
            --from-literal=GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
            --from-literal=GOOGLE_CALENDAR_ID=${{ secrets.GOOGLE_CALENDAR_ID }}
          
          # Install or upgrade Redis with Helm
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          helm upgrade --install redis bitnami/redis \
            -n mussubot \
            --set auth.enabled=false \
            --set architecture=standalone \
            --set master.persistence.size=1Gi \
            --set master.service.ports.redis=6379 \
            --set master.resources.limits.memory=128Mi \
            --set master.resources.limits.cpu=250m \
            --set master.resources.requests.memory=64Mi \
            --set master.resources.requests.cpu=100m
          
          # Apply k8s manifests
          cat k8s/deployment.yaml | sed "s|\${IMAGE_REPO}|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" | sed "s|\${IMAGE_TAG}|$TAG|g" | kubectl apply -f -
          kubectl apply -f k8s/configmap.yaml
          
          # Update Redis URL in configmap if needed
          kubectl patch configmap mussubotti-config \
            -n mussubot \
            --type merge \
            --patch '{"data":{"REDIS_URL":"redis://redis-master:6379"}}'
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/mussubotti -n mussubot 