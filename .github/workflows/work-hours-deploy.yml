name: Work Hours Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'work_hours/**'
      - 'Dockerfile.work_hours'
      - 'k8s/work-hours-deployment.yaml'
      - 'k8s/work-hours-service-ingress.yaml'
      - '.github/workflows/work-hours-deploy.yml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/dilaz/mussubotti-work-hours
  K3S_CONTEXT: default

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: dilaz
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push the Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.work_hours
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/dilaz/mussubotti-work-hours:${{ github.sha }},ghcr.io/dilaz/mussubotti-work-hours:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    needs: build-and-push-image
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3
      
      - name: Setup Tailscale
        uses: tailscale/github-action@main
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci
      
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_HOST }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      
      - name: Create namespace if it doesn't exist
        run: kubectl get namespace mussubot || kubectl create namespace mussubot
      
      - name: Create k8s secrets if they don't exist
        run: |
          if ! kubectl get secret mussubotti-secrets -n mussubot &>/dev/null; then
            kubectl create secret generic mussubotti-secrets \
              -n mussubot \
              --from-literal=DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }} \
              --from-literal=GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }} \
              --from-literal=GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }} \
              --from-literal=GOOGLE_CALENDAR_ID=${{ secrets.GOOGLE_CALENDAR_ID }} \
              --from-literal=GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              --from-literal=GEMINI_MODEL=${{ secrets.GEMINI_MODEL }} \
              --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }}
          fi
          
      - name: Create configmap if it doesn't exist
        run: |
          if ! kubectl get configmap mussubotti-config -n mussubot &>/dev/null; then
            kubectl apply -f k8s/configmap.yaml
          fi
      
      - name: Prepare manifests
        run: |
          TAG=$(echo ${{ github.sha }} | cut -c1-7)
          mkdir -p prepared-manifests
          cat k8s/work-hours-deployment.yaml | sed "s|\${IMAGE_REPO}|${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}|g" | sed "s|\${IMAGE_TAG}|$TAG|g" > prepared-manifests/deployment.yaml
          cat k8s/work-hours-service-ingress.yaml | sed "s|\${WORK_HOURS_DOMAIN}|${{ secrets.WORK_HOURS_DOMAIN }}|g" > prepared-manifests/service-ingress.yaml
      
      - name: Deploy to the Kubernetes cluster
        uses: azure/k8s-deploy@v4
        with:
          namespace: mussubot
          action: deploy
          strategy: basic
          manifests: |
            prepared-manifests/deployment.yaml
            prepared-manifests/service-ingress.yaml
          images: |
            ghcr.io/dilaz/mussubotti-work-hours:${{ github.sha }}
  
  rollback:
    if: failure()
    name: Rollback
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Set the Kubernetes context
        uses: azure/k8s-set-context@v2
        with:
          method: service-account
          k8s-url: ${{ secrets.KUBERNETES_HOST }}
          k8s-secret: ${{ secrets.KUBERNETES_SECRET }}
      
      - name: Rollback
        run: |
          kubectl rollout undo deployment/work-hours -n mussubot 